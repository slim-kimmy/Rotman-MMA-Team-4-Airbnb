# -*- coding: utf-8 -*-
"""Team 4 Python Project - Recommeder Part 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1moh-KmrsyFcXWuhe4FCu7iYyvKo1X5Ec

Setup
"""

pip install -qU langchain-community faiss-cpu

# os.environ["LANGSMITH_TRACING"] = "true"
# os.environ["LANGSMITH_API_KEY"] = getpass.getpass()

pip install -qU langchain-openai

import getpass
import os

if not os.environ.get("AZURE_OPENAI_API_KEY"):
  os.environ["AZURE_OPENAI_API_KEY"] = getpass.getpass("Enter API key for Azure: ")

from langchain_openai import AzureOpenAIEmbeddings

embeddings = AzureOpenAIEmbeddings(
    azure_endpoint=os.environ["AZURE_OPENAI_ENDPOINT"],
    azure_deployment=os.environ["AZURE_OPENAI_DEPLOYMENT_NAME"],
    openai_api_version=os.environ["AZURE_OPENAI_API_VERSION"],
)

import faiss
from langchain_community.docstore.in_memory import InMemoryDocstore
from langchain_community.vectorstores import FAISS

index = faiss.IndexFlatL2(len(embeddings.embed_query("hello world")))

vector_store = FAISS(
    embedding_function=embeddings,
    index=index,
    docstore=InMemoryDocstore(),
    index_to_docstore_id={},
)

from langchain_core.documents import Document

properties = [
    Document(
        page_content=prop["page_content"],
        metadata={
            "property_id": prop["property_id"],
            "location": prop["location"],
            "tags": prop["tags"]
        }
    )
    for prop in property_data
]

uuids = [str(uuid4()) for _ in range(len(documents))]

vector_store.add_documents(documents=documents, ids=uuids)

"""Manage vector store"""

def gen_page_content(property_item):
    location = property_item["location"]
    types = property_item["type"]
    # Join tags and features into a readable string
    features_text = ", ".join(property_item["features"])
    tags_text = ", ".join(property_item["tags"])
    # Create a paragraph description
    return (
        f"{tags_text} {location} {types} with {features_text} experiences."
    )
# Airbnb has guidelines for titles, favoring shorter, sentence-style texts and avoiding emojis or excessive capitalization.

# Using for loop to convert database property into a Document with generated page_content
documents = [
    Document(
        page_content=gen_page_content(prop),
        metadata={
            "feature": prop["features"],
            "location": prop["location"],
            "tags": prop["tags"]
        }
    )
    for prop in property_data
]

# Generate UUIDs for each document
uuids = [str(uuid4()) for _ in range(len(documents))]

vector_store.add_documents(documents=documents, ids=uuids)

"""Query directly and Similarity search with score"""

results = vector_store.similarity_search_with_score(
    query_text,
    k=5,
    filter={"environment": user["preferred_environment"]}  # from registration, dynamic query text plus user preferences in profile together generate recommendation.
)
# Filter the price per night with user's budget range.
def budget_filter(doc):
    price = doc.metadata["price_per_night"]
    return user["budget_min"] <= price <= user["budget_max"]

for res, score in results:
    print(f"* [SIM={score:3f}] {res.page_content}]")









